Phase:	extractPermissionsProhibitions
Input: Lookup Token SpaceToken Action LicensesName GeneralUserPermProhActions AdvancedUserPermProhActions specialDots Address Asset
Options: control = appelt

Macro: NOUN_PHRASE
(
{Token.kind == word , Token.category == NN}|
{Token.kind == word , Token.category == NNS}|
{Token.kind == word , Token.category == NNP}|
{Token.kind == word ,Token.category == NNPS}
)


Macro: ADVERB
(
{Token.kind == word , Token.category == RB}|
{Token.kind == word , Token.category == RBR}|
{Token.kind == word , Token.category == RBS}
)


Macro: PROHIBITION_WORDS
(
({Token.string == "Do"}{SpaceToken}{Token.string == "not"})|
({Token.string == "Don"}{Token.string == "t"})|
({Token.root == "please"}{SpaceToken}{Token.root == "do"}({SpaceToken})?({Token.root == "not"}|{Token.string == "n't"}))|
(
((({Token.root == "the"}{SpaceToken})?({Token.root == "user"}|{Token.root == "users"}))|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "contributors"}|{Token.root == "recipient"}|{Token.root == "licensee"})
{SpaceToken}
({Token.root == "also"}{SpaceToken})?
(({Token.string == "may"}|{Token.string == "MAY"}|{Token.root == "will"}|{Token.root == "agree"}|{Token.root == "can"}|{Token.root == "should"}|{Token.root == "must"})({SpaceToken})?)
{Token.root == "not"}({Token.kind == punctuation , Token.string != "."})?
)|
({LicensesName}{SpaceToken}{Token.root == "do"}{SpaceToken}{Token.root == "not"}{SpaceToken}({Token.root == "grant"}|{Token.root == "give"}))|
({Token.string == "no"}{SpaceToken}({Token.root == "right"}|{Token.root == "permission"}|{Token.root == "part"}|{Token.root == "content"}))|
(
(({Token.root == "the"}{SpaceToken}{Token.root == "user"})|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"}){SpaceToken}
(({Token.root == "can"}{Token.kind == punctuation}{Token.root == "t"}) | ({Token.root == "be"}{SpaceToken}{Token.root == "prohibit"}))
)

)

Macro: PERMISSION_WORDS
(
(
{Token.root != "not"}{SpaceToken}
({Token.string == "give"}|{Token.string == "gives"}|{Token.string == "grant"}|{Token.string == "grants"}|{Token.string == "allow"}|{Token.string == "allows"}|{Token.string == "permit"}|{Token.string == "permits"})
({SpaceToken}{Token.root == "to"})?{SpaceToken}
({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
)|
(
({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
{SpaceToken}{Token.root == "be"}{SpaceToken}({Token, Token.string != not}{SpaceToken})?({Token.string == "given"}|{Token.string == "granted"}|{Token.string == "allowed"}|{Token.string == "permitted"})
)|
(
(({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
{SpaceToken}{Token.root == "be"}{SpaceToken}({Token}{SpaceToken})?{Token.root == "free"})|
({Token.root == "you"}{Token.kind == punctuation}{Token.root == "re"}({SpaceToken})?{Token.root == "free"}({SpaceToken})?)
)
)

Macro: PERMISSION_WORDS2
(
(
({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
{SpaceToken}({Token.string == "can"}|{Token.string == "CAN"}|{Token.string == "may"}|{Token.string == "MAY"})
)|
(
(({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
{SpaceToken}{Token.root == "be"}{SpaceToken}({Token}{SpaceToken})?{Token.root == "free"})|
({Token.root == "you"}{Token.kind == punctuation}{Token.root == "re"}({SpaceToken})?{Token.root == "free"}({SpaceToken})?)
)
)


Rule: Prohibition1
( 
	PROHIBITION_WORDS({SpaceToken})*
	(
	(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |
	({Token.string != "." , !GeneralUserPermProhActions , !AdvancedUserPermProhActions}({SpaceToken})*)
	)*   
	(
	  (
		  {AdvancedUserPermProhActions}({SpaceToken})?
		  ( (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*
		  {AdvancedUserPermProhActions}({SpaceToken})?  
	  ): AdvancedUserPermProhActions	  
	  |
	  (
		  ({GeneralUserPermProhActions}): GeneralUserPermProhActions
		  ({SpaceToken})?	  
	  )	  
	)  
  ((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})*))*   
   
): label

-->
{
	gate.AnnotationSet prohibitions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Prohibition1");
	features.put("kind","Prohibition");			
	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();				
		features.put("generalAction",action);	
		features.put("generalUser", "true");
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);	
			features.put("generalUser", "false");
		
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}
	
	outputAS.add(prohibitions.firstNode(), prohibitions.lastNode(), "Prohibition",features);
}


Rule: Prohibition6
( 
	PROHIBITION_WORDS({SpaceToken})*
	(
	(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |
	({Token.string != "." , !GeneralUserPermProhActions , !AdvancedUserPermProhActions}({SpaceToken})*)
	)*   
	( 	
	  ({AdvancedUserPermProhActions}): AdvancedUserPermProhActions
	  |
	  ({GeneralUserPermProhActions}): GeneralUserPermProhActions	  	 
	)
	({SpaceToken})?
	((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})*))*   
   
): label

-->
{
	gate.AnnotationSet prohibitions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Prohibition6");
	features.put("kind","Prohibition");		
	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();				
		features.put("generalAction",action);	
		features.put("generalUser", "true");
	}else{
		String action = ((gate.Annotation)advancedAction.iterator().next()).getFeatures().get("propertyValue").toString();						
		//String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
		features.put("advancedAction",action);			
		features.put("generalUser", "false");
	}
	outputAS.add(prohibitions.firstNode(), prohibitions.lastNode(), "Prohibition",features);
}




Rule: Prohibition2
(
	({Address}|{Token.root == "license"}|{Token.root == "agreement"}|{Asset}){SpaceToken}
	({Token.root == "can"}|{Token.root == "may"}){SpaceToken}{Token.root == "not"}{SpaceToken}{Token.root == "be"}{SpaceToken} 
	(
		(
			{AdvancedUserPermProhActions}({SpaceToken})?
			(
			((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*   
			({AdvancedUserPermProhActions}({SpaceToken})?)
			)* 
		): AdvancedUserPermProhActions		
		|
		(
			({GeneralUserPermProhActions}) : GeneralUserPermProhActions
			({SpaceToken})?
			(
				(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
				({Token.string != "."}({SpaceToken})?)
			)*   
		)
	)
): label

-->
{
	gate.AnnotationSet prohibitions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Prohibition2");
	features.put("kind","Prohibition");		
	
	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();				
		features.put("generalAction",action);	
		features.put("generalUser", "true");
	}else{
		try{
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);			
			features.put("generalUser", "false");
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}
	
	outputAS.add(prohibitions.firstNode(), prohibitions.lastNode(), "Prohibition",features);
}



Rule: Prohibition3
(
	(
	  (
		{AdvancedUserPermProhActions}({SpaceToken})?
		((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*   
	  ): AdvancedUserPermProhActions	  	  
	  |
	  (
		({GeneralUserPermProhActions}): GeneralUserPermProhActions
		({SpaceToken})?
		((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*   
	  )	  
	)
	(
	({Token.root == "be"}{SpaceToken}({Token}{SpaceToken})?{Token.string == "prohibited"})|
	(({Token.root == "be"}){SpaceToken}{Token.string == "not"}{SpaceToken}({Token.string == "allowed"}|{Token.string == "permitted"}))|
	(({Token.string == "isn"}|{Token.string == "aren"}){Token.kind == punctuation}{Token.string == "t"}{SpaceToken}({Token.string == "allowed"}|{Token.string == "permitted"}))
	)
): label
-->
{
	gate.AnnotationSet prohibitions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Prohibition3");
	features.put("kind","Prohibition");		
	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();						
		features.put("generalAction",action);	
		features.put("generalUser", "true");
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);			
			features.put("generalUser", "false");
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}
	
	outputAS.add(prohibitions.firstNode(), prohibitions.lastNode(), "Prohibition",features);
}




Rule: Prohibition5
(
	{Token.root == "if"}{SpaceToken}
	((ADVERB) {SpaceToken})?
	(
	(({Token.root == "the"}{SpaceToken})?({Token.root == "user"}|{Token.root == "users"}))|
	{Token.root == "you"}|{Token.string == "your"}|{Token.root == "contributor"}|{Token.root == "contributors"}|{Token.root == "recipient"}|{Token.root == "licensee"}
	)
	{SpaceToken}
	((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*   
	 PROHIBITION_WORDS({SpaceToken})?
	(
		(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |
		({Token.string != ".", !GeneralUserPermProhActions, !AdvancedUserPermProhActions}({SpaceToken})?)
	)* 
	(
	  (
		{AdvancedUserPermProhActions}({SpaceToken})?
		(
		((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))
		({AdvancedUserPermProhActions}({SpaceToken})?)
		)*  
	  ): AdvancedUserPermProhActions	  
	  |	
	  (
		({GeneralUserPermProhActions}): GeneralUserPermProhActions
		({SpaceToken})? 
	  )	  
	)  
	((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space})) |({Token.string != "."}({SpaceToken})?))*   
): label

-->
{
	gate.AnnotationSet prohibitions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Prohibition5");
	features.put("kind","Prohibition");		
	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();						
		features.put("generalAction",action);	
		features.put("generalUser", "true");
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);			
			features.put("generalUser", "false");
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}	
	outputAS.add(prohibitions.firstNode(), prohibitions.lastNode(), "Prohibition",features);
}






Rule: Permission5
(
PERMISSION_WORDS2({SpaceToken})?
({!GeneralUserPermProhActions , !AdvancedUserPermProhActions, Token.kind == word , Token.root != "be" , Token.root != "not"}{SpaceToken})*
)
(  
  (
    (
	  {AdvancedUserPermProhActions}({SpaceToken})?
	  (
	  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	  ({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–", !AdvancedUserPermProhActions}({SpaceToken})?)
	  )*
	  {AdvancedUserPermProhActions}({SpaceToken})?  
	):AdvancedUserPermProhActions	
	|
	(
	  ({GeneralUserPermProhActions}):GeneralUserPermProhActions
	  ({SpaceToken})?
	)
  )
  (
  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
  ({Token.string != "must", Token.root != "but" , Token.root != "however", Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
  )*  
): label

-->

{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission5");
	features.put("kind","Permission");		

	if(generalAction != null){
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();								
		features.put("generalAction",action);	
		features.put("generalUser", "true");		
	}else{
		try{
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);
			features.put("generalUser", "false");			
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}		
	}
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}





Rule: Permission7
(
PERMISSION_WORDS2({SpaceToken})?
({!GeneralUserPermProhActions , !AdvancedUserPermProhActions , Token.kind == word , Token.root != "be" , Token.root != "not"}{SpaceToken})*
)
(  
  (
	  ({AdvancedUserPermProhActions}): AdvancedUserPermProhActions
	  |
	  ({GeneralUserPermProhActions}): GeneralUserPermProhActions

  )
  ({SpaceToken})?
  (
  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
  ({Token.string != "must", Token.root != "but" ,Token.root != "however", Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
  )*  
): label

-->
{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission7");
	features.put("kind","Permission");		

	if(generalAction != null){
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();								
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		features.put("generalAction",action);
		features.put("generalUser", "true");		
	}else{
		String action = ((gate.Annotation)advancedAction.iterator().next()).getFeatures().get("propertyValue").toString();								
		//String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
		features.put("advancedAction",action);	
		features.put("generalUser", "false");
	}	
	
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}



Rule: Permission1
(
	PERMISSION_WORDS({SpaceToken})?
	(
	(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	({Token.string != "." , !GeneralUserPermProhActions , !AdvancedUserPermProhActions}({SpaceToken})?)
	)*   
)
(  
  (
    (
	  {AdvancedUserPermProhActions}({SpaceToken})?
	  (
	  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	  ({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–", !AdvancedUserPermProhActions}({SpaceToken})?)
	  )*
	  {AdvancedUserPermProhActions}({SpaceToken})? 
	): AdvancedUserPermProhActions 	    
	|
	(
	  ({GeneralUserPermProhActions}): GeneralUserPermProhActions 
	  ({SpaceToken})?
	)	
  )
  (
  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
  ({Token.string != "must", Token.root != "but" , Token.root != "however", Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
  )*  
): label

-->
{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission1");
	features.put("kind","Permission");		
	if(generalAction != null){
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();								
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		features.put("generalAction",action);
		features.put("generalUser", "true");		
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);
			features.put("generalUser", "false");				
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}	
	
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}





Rule: Permission6
(
	PERMISSION_WORDS({SpaceToken})?
	(
	(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–", !GeneralUserPermProhActions , !AdvancedUserPermProhActions}({SpaceToken})?)
	)*   	
)
(  
  (
	({AdvancedUserPermProhActions}): AdvancedUserPermProhActions
	|
	({GeneralUserPermProhActions}): GeneralUserPermProhActions		
  )
  ({SpaceToken})?
  (
  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
  ({Token.string != "must", Token.root != "but" ,Token.root != "however", Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
  )*  
): label

-->
{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission6");
	features.put("kind","Permission");		
	if(generalAction != null){
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();									
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		features.put("generalAction",action);
		features.put("generalUser", "true");		
	}else{
		String action = ((gate.Annotation)advancedAction.iterator().next()).getFeatures().get("propertyValue").toString();									
		//String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
		features.put("advancedAction",action);	
		features.put("generalUser", "false");
	}	
	
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}




Rule: Permission4
(
  {Token.root == "if"}{SpaceToken}
  ((ADVERB) {SpaceToken})?
  ((({Token.root == "the"}{SpaceToken})?({Token.root == "user"}|{Token.root == "users"}))|{Token.root == "you"}|{Token.string == "your"}|{Token.root == "contributor"}|{Token.root == "contributors"}|{Token.root == "recipient"}|{Token.root == "licensee"})
  {SpaceToken}  
  ((({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|({Token.string != "."}({SpaceToken.kind == space})?))*   
	(({Token.root == "everyone"}|{Token.root == "user"}|{Token.root == "you"}|{Token.root == "contributor"}|{Token.root == "recipient"}|{Token.root == "licensee"})
	{SpaceToken}({Token.string == "can"}|{Token.string == "CAN"}|{Token.string == "may"}|{Token.string == "MAY"})
	)  
  ({SpaceToken})?
  (
	  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	  ({Token.string != "." , !GeneralUserPermProhActions, !AdvancedUserPermProhActions}({SpaceToken})?)
  )*     
  (
    (
	  {AdvancedUserPermProhActions}({SpaceToken})?
	  (
	  (
	  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
	  ({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–", !AdvancedUserPermProhActions}({SpaceToken})?)
	  )
	  ({AdvancedUserPermProhActions}({SpaceToken})?)
	  )*  
	): AdvancedUserPermProhActions	    
	|
	(
	  ({GeneralUserPermProhActions}): GeneralUserPermProhActions
	  ({SpaceToken})?
	)	
  )
  (
  (({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
  ({Token.string != "must", Token.root != "but" ,Token.root != "however", Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
  )*
): label

-->

{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission4");
	features.put("kind","Permission");		
	if(generalAction != null){
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();										
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		features.put("generalAction",action);
		features.put("generalUser", "true");		
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);			
			features.put("generalUser", "false");
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}
	
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}




Rule: Permission3
(
	({Token.string != "." , !Asset , Token.root != "license" , Token.root != "agreement"}({SpaceToken})?)*
	({Token.root == "license"}|{Token.root == "agreement"}|{Asset}){SpaceToken}
	({Token.kind == word , Token.root != "no" , Token.root != "not"}{SpaceToken})*
	(({Token.root == "can"}|{Token.root == "may"}){SpaceToken}{Token.root == "be"}){SpaceToken} 
	(
	  (
		{AdvancedUserPermProhActions}({SpaceToken})?
		(
		(
		(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
		({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–", !AdvancedUserPermProhActions}({SpaceToken})?)
		)
		({AdvancedUserPermProhActions}({SpaceToken})?)
		)* 
	  ): AdvancedUserPermProhActions  	  
	  |
	  (
		({GeneralUserPermProhActions}) : GeneralUserPermProhActions
		({SpaceToken})?
		(
			(({Address}|{specialDots})(({Token.kind == punctuation , Token.string != "."}({SpaceToken.kind == space})?)|{Token.string == "."}|{SpaceToken.kind == space}))|
			({Token.string != "must", Token.root != "but", Token.root != "however",  Token.string != "should", Token.string != "provided", Token.string != ".", Token.string != "–"}({SpaceToken})?)
		)*
	  )	  
	)

): label

-->

{
	gate.AnnotationSet permissions = (gate.AnnotationSet)bindings.get("label"); 
    gate.AnnotationSet generalAction = (gate.AnnotationSet)bindings.get("GeneralUserPermProhActions"); 
	gate.AnnotationSet advancedAction = (gate.AnnotationSet)bindings.get("AdvancedUserPermProhActions"); 	
	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("rule","Permission3");
	features.put("kind","Permission");		
	if(generalAction != null){
		String action = ((gate.Annotation)generalAction.iterator().next()).getFeatures().get("propertyValue").toString();											
		//String action = doc.getContent().getContent(generalAction.firstNode().getOffset(), generalAction.lastNode().getOffset()).toString();
		features.put("generalAction",action);
		features.put("generalUser", "true");		
	}else{
		try{	
			String action = doc.getContent().getContent(advancedAction.firstNode().getOffset(), advancedAction.lastNode().getOffset()).toString();	
			features.put("advancedAction",action);			
			features.put("generalUser", "false");
		}catch(InvalidOffsetException ioe){
			  throw new GateRuntimeException(ioe);
		}	
	}	
	
	outputAS.add(permissions.firstNode(), permissions.lastNode(), "Permission",features);
}




